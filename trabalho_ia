import java.util.Scanner;
import java.io.FileWriter;
import java.io.IOException;
import java.util.regex.Pattern;

public class Calculo_IRRF_Salario_Liquido {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Obtenção das informações do trabalhador
        System.out.println("Informe o nome do trabalhador:");
        String nome = sc.nextLine();
        System.out.println("Informe o salário bruto:");
        double salarioBruto = sc.nextDouble();
        System.out.println("Informe o desconto do INSS:");
        double descontoINSS = sc.nextDouble();
        System.out.println("Informe o número de dependentes:");
        int numeroDependentes = sc.nextInt();
        System.out.println("Informe o valor total de deduções para IRRF:");
        double deducoesIRRF = sc.nextDouble();
        System.out.println("Informe o CPF:");
        String cpf = sc.next();
        System.out.println("Informe o CEP:");
        String cep = sc.next();
        if (!validarCPF(cpf)) {
            System.out.println("CPF inválido!");
            return;
        }
        // Imposto de renda
        double baseCalculoIRRF = salarioBruto - descontoINSS;
        double parcelaIsenta = getParcelaIsentaIRRF(numeroDependentes);
        double baseTributavelIRRF = baseCalculoIRRF - parcelaIsenta - deducoesIRRF;
        double aliquotaIRRF = getAliquotaIRRF(baseTributavelIRRF);
        double impostoIRRF = baseTributavelIRRF * aliquotaIRRF;
        double salarioLiquido = salarioBruto - descontoINSS - impostoIRRF;

        //simulação de consulta de endereço por CEP
        String enderecoCompleto = consultarEnderecoPorCEP(cep);

        //resultados
        System.out.println("\n**Resultados:**");
        System.out.println("Nome: " + nome);
        System.out.println("Salário bruto: R$ " + String.format("%.2f", salarioBruto));
        System.out.println("Desconto INSS: R$ " + String.format("%.2f", descontoINSS));
        System.out.println("Base de cálculo do IRRF: R$ " + String.format("%.2f", baseCalculoIRRF));
        System.out.println("Parcela isenta do IRRF: R$ " + String.format("%.2f", parcelaIsenta));
        System.out.println("Base tributável do IRRF: R$ " + String.format("%.2f", baseTributavelIRRF));
        System.out.println("Alíquota do IRRF: " + String.format("%.2f%%", aliquotaIRRF * 100));
        System.out.println("Imposto de Renda retido na fonte (IRRF): R$ " + String.format("%.2f", impostoIRRF));
        System.out.println("Salário líquido: R$ " + String.format("%.2f", salarioLiquido));
        System.out.println("Endereço completo: " + enderecoCompleto);

        gravarDadosEmArquivo(nome, salarioBruto, descontoINSS, numeroDependentes, deducoesIRRF, cpf, cep, impostoIRRF, salarioLiquido, enderecoCompleto);
    }

    private static boolean validarCPF(String cpf) {
        return Pattern.matches("\\d{11}", cpf);
    }
    private static String consultarEnderecoPorCEP(String cep) {
        return "Rua x, 123 - Bairro x, Cidade x - UF, Brasil";
    }

    //parcela isenta do IRRF
    private static double getParcelaIsentaIRRF(int numeroDependentes) {
        double valorPorDependente = 189.59;
        return numeroDependentes * valorPorDependente;
    }
    private static double getAliquotaIRRF(double baseTributavelIRRF) {
        if (baseTributavelIRRF <= 1903.98) {
            return 0.0;
        } else if (baseTributavelIRRF <= 2826.65) {
            return 0.075;
        } else if (baseTributavelIRRF <= 3751.05) {
            return 0.15;
        } else if (baseTributavelIRRF <= 4664.68) {
            return 0.225;
        } else {
            return 0.275;
        }
    }
    private static void gravarDadosEmArquivo(String nome, double salarioBruto, double descontoINSS, int numeroDependentes, double deducoesIRRF, String cpf, String cep, double impostoIRRF, double salarioLiquido, String enderecoCompleto) {
        try (FileWriter writer = new FileWriter("dados_trabalhador.txt")) {
            writer.write("Nome: " + nome + "\n");
            writer.write("Salário bruto: R$ " + String.format("%.2f", salarioBruto) + "\n");
            writer.write("Desconto INSS: R$ " + String.format("%.2f", descontoINSS) + "\n");
            writer.write("Número de dependentes: " + numeroDependentes + "\n");
            writer.write("Deduções para IRRF: R$ " + String.format("%.2f", deducoesIRRF) + "\n");
            writer.write("CPF: " + cpf + "\n");
            writer.write("CEP: " + cep + "\n");
            writer.write("Imposto de Renda retido na fonte (IRRF): R$ " + String.format("%.2f", impostoIRRF) + "\n");
            writer.write("Salário líquido: R$ " + String.format("%.2f", salarioLiquido) + "\n");
            writer.write("Endereço completo: " + enderecoCompleto + "\n");
        } catch (IOException e) {
            System.out.println("Erro ao gravar os dados em arquivo: " + e.getMessage());
        }
    }
}
